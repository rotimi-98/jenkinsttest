pipeline {

    agent none

    stages {
        stage('Build') {
          agent {
            docker {
              image 'node:16.13.1-alpine'
            }
          }
            when {
              allOf {
                changeset '**/result/**'
                }
            }
            steps {
                echo 'Compiling worker application...'
                dir('result') {
                  sh 'npm install'
                }
            }
        }
        stage('Test') {
          agent {
            docker {
              image 'node:16.13.1-alpine'
            }
          }
            when {
              allOf {
                changeset '**/result/**'
                }
            }
            steps {
                echo 'Running unit test for worker application..'
                dir('result') {
                  sh 'npm install && npm test'
                }
            }
        }
        stage('Package') {
          agent {
            docker {
              image 'node:16.13.1-alpine'
            }
          }
            when {
              allOf {
                branch 'master'
                changeset '**/result/**'
                }
             }
            steps {
                echo 'Packaging and archiving result application...'
                dir('result') {
                  sh 'npm install && npm test'
                  sh '''
                     #!/bin/bash
                     if test -e result_*.tar.gz; then
                     rm result_*.tar.gz
                     fi
                  '''
                  sh 'tar czf result_$BUILD_NUMBER.tar.gz node_modules server.js package.json Dockerfile Dockerfile-scratch'
                  archiveArtifacts artifacts: 'result_*.tar.gz', fingerprint: true, followSymlinks: false
                } 
            }
        }
        stage('Docker-package') {
            agent any
            when {
              allOf {
                branch 'master'
                changeset '**/result/**'
                }
             }
            steps {
                echo 'Packaging and archiving result application...'
                script{
                  docker.withRegistry('https://index.docker.io/v1/', 'dockerlogin'){
                   def resultImage = docker.build("rotimi98/result:v${env.BUILD_ID}", "./result")
                   resultImage.push()
                   resultImage.push("${env.BRANCH_NAME}")
                  }
                }
            }
        }
    }
    post {
     always {
       echo "Pipeline for result is completed and packaging archive file..."
      }
     failure {
       slackSend (channel: "#jenkinsint", message: "Build failed ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
     }
     success {
       slackSend (channel: "#jenkinsint", message: "Build succeeded ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
     }

    }

}
